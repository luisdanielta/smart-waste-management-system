class Bluetooth // HC-05
{
protected:
    struct BluetoothConfig
    {
        Gpio *rxPin;
        Gpio *txPin;
        uart_inst_t *uart = uart0;
        uint baudRate = 0;
        /* optional */
        char *name = NULL;
    } config;

public:
    Bluetooth(Gpio *rxPin, Gpio *txPin, uint baudRate)
    {
        config.rxPin = rxPin;
        config.txPin = txPin;
        config.baudRate = baudRate;

        /* set uart */
        uart_init(config.uart, config.baudRate);
        gpio_set_function(config.rxPin->config.pin, GPIO_FUNC_UART);
        gpio_set_function(config.txPin->config.pin, GPIO_FUNC_UART);
    }
};


class Ultrasonic // HC-SR04
{
protected:
    struct UltrasonicConfig
    {
        Gpio *triggerPin;
        Gpio *echoPin;
        /* optional */
        char *name = NULL;
    } config;

    struct UltrasonicData
    {
        float distance = 0;
        float timeout = 0;
        float startTimeout = 0;
        float endTimeout = 0;
        float dataRaw = 0;
    } data;

public:
    Ultrasonic(Gpio *triggerPin, Gpio *echoPin)
    {
        config.triggerPin = triggerPin;
        config.echoPin = echoPin;

        /* set gpio */
        config.triggerPin->setValue(false);

        /* set gpio pulls */
        gpio_set_pulls(config.triggerPin->config.pin, true, false);
    }

    /* reference to ultrasonic */
    void setName(char *name)
    {
        config.name = name;
    }

    /* fns */

    UltrasonicData getData()
    {

        data.timeout = 0;
        data.startTimeout = 0;
        data.endTimeout = 0;

        /* set trigger pin */
        config.triggerPin->setValue(true);
        sleep_us(10);
        config.triggerPin->setValue(false);

        /* wait for echo pin */
        while (config.echoPin->getValue() == 0)
        {
        };
        data.startTimeout = time_us_32();

        while (config.echoPin->getValue() == 1)
        {
        };
        data.endTimeout = time_us_32();

        data.timeout = data.endTimeout - data.startTimeout;

        data.dataRaw = data.timeout;
        data.distance = (data.timeout * 0.0343) / 2;
        return data;
    }
};
